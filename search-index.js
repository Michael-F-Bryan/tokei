var searchIndex = {};
searchIndex["tokei"] = {"doc":"# Tokei: Code Analysis Library([For the binary](https://github.com/Aaronepower/tokei/))","items":[[3,"Languages","tokei","A collection of existing languages([_List of Languages_](https://github.com/Aaronepower/tokei#supported-languages))",null,null],[3,"Language","","Struct representing a single Language.",null,null],[12,"blanks","","Number of blank lines.",0,null],[12,"code","","Number of lines of code.",0,null],[12,"comments","","Number of comments(both single, and multi-line)",0,null],[12,"files","","A collection of files to be analysed.",0,null],[12,"stats","","A collection of statistics based on the files provide from `files`",0,null],[12,"lines","","Number of total lines.",0,null],[12,"line_comment","","A collection of single line comments in the language. ie. `//` in Rust.",0,null],[12,"multi_line","","A collection of tuples representing the start and end of multi line comments. ie. `/* comment */` in Rust.",0,null],[12,"nested","","Whether the language supports nested multi line comments or not.",0,null],[12,"total_files","","The total number of files from `stats`.",0,null],[3,"Stats","","A struct representing the statistics of a file.",null,null],[12,"blanks","","Number of blank lines within the file.",1,null],[12,"code","","Number of lines of code within the file.",1,null],[12,"comments","","Number of comments within the file. (_includes both multi line, and single line comments_)",1,null],[12,"lines","","Total number of lines within the file.",1,null],[12,"name","","File name.",1,null],[4,"LanguageType","","",null,null],[13,"ActionScript","","ActionScript",2,null],[13,"Assembly","","Assembly",2,null],[13,"Autoconf","","Autoconf",2,null],[13,"Bash","","Bash",2,null],[13,"Batch","","Batch",2,null],[13,"C","","C",2,null],[13,"CHeader","","CHeader",2,null],[13,"Clojure","","Clojure",2,null],[13,"CoffeeScript","","CoffeeScript",2,null],[13,"ColdFusion","","ColdFusion",2,null],[13,"ColdFusionScript","","ColdFusionScript",2,null],[13,"Coq","","Coq",2,null],[13,"Cpp","","Cpp",2,null],[13,"CppHeader","","CppHeader",2,null],[13,"CSharp","","CSharp",2,null],[13,"CShell","","CShell",2,null],[13,"Css","","Css",2,null],[13,"D","","D",2,null],[13,"Dart","","Dart",2,null],[13,"DeviceTree","","DeviceTree",2,null],[13,"Erlang","","Erlang",2,null],[13,"FortranLegacy","","FortranLegacy",2,null],[13,"FortranModern","","FortranModern",2,null],[13,"Go","","Go",2,null],[13,"Haskell","","Haskell",2,null],[13,"Html","","Html",2,null],[13,"Idris","","Idris",2,null],[13,"Isabelle","","Isabelle",2,null],[13,"Jai","","Jai",2,null],[13,"Java","","Java",2,null],[13,"JavaScript","","JavaScript",2,null],[13,"Julia","","Julia",2,null],[13,"Json","","Json",2,null],[13,"Jsx","","Jsx",2,null],[13,"Kotlin","","Kotlin",2,null],[13,"Less","","Less",2,null],[13,"LinkerScript","","LinkerScript",2,null],[13,"Lisp","","Lisp",2,null],[13,"Lua","","Lua",2,null],[13,"Makefile","","Makefile",2,null],[13,"Markdown","","Markdown",2,null],[13,"Mustache","","Mustache",2,null],[13,"Nim","","Nim",2,null],[13,"ObjectiveC","","ObjectiveC",2,null],[13,"ObjectiveCpp","","ObjectiveCpp",2,null],[13,"OCaml","","OCaml",2,null],[13,"Oz","","Oz",2,null],[13,"Pascal","","Pascal",2,null],[13,"Perl","","Perl",2,null],[13,"Polly","","Polly",2,null],[13,"Php","","Php",2,null],[13,"Protobuf","","Protobuf",2,null],[13,"Prolog","","Prolog",2,null],[13,"Python","","Python",2,null],[13,"Qcl","","Qcl",2,null],[13,"R","","R",2,null],[13,"Ruby","","Ruby",2,null],[13,"RubyHtml","","RubyHtml",2,null],[13,"Rust","","Rust",2,null],[13,"Sass","","Sass",2,null],[13,"Scala","","Scala",2,null],[13,"Sml","","Sml",2,null],[13,"Sql","","Sql",2,null],[13,"Swift","","Swift",2,null],[13,"Tex","","Tex",2,null],[13,"Text","","Text",2,null],[13,"Toml","","Toml",2,null],[13,"TypeScript","","TypeScript",2,null],[13,"VimScript","","VimScript",2,null],[13,"UnrealScript","","UnrealScript",2,null],[13,"Wolfram","","Wolfram",2,null],[13,"Xml","","Xml",2,null],[13,"Yaml","","Yaml",2,null],[13,"Zsh","","Zsh",2,null],[11,"clone","","",0,{"inputs":[{"name":"language"}],"output":{"name":"language"}}],[11,"fmt","","",0,{"inputs":[{"name":"language"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",0,{"inputs":[],"output":{"name":"language"}}],[11,"cmp","","",0,{"inputs":[{"name":"language"},{"name":"language"}],"output":{"name":"ordering"}}],[11,"eq","","",0,{"inputs":[{"name":"language"},{"name":"language"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"language"},{"name":"language"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"language"},{"name":"language"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"language"},{"name":"language"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"language"},{"name":"language"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"language"},{"name":"language"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"language"},{"name":"language"}],"output":{"name":"bool"}}],[11,"new","","Constructs a new  empty Language with the comments provided.",0,{"inputs":[{"name":"vec"},{"name":"vec"}],"output":{"name":"self"}}],[11,"new_blank","","Convience constructor for creating a language that has no commenting syntax.",0,{"inputs":[],"output":{"name":"self"}}],[11,"new_c","","Convience constructor for creating a language that has the same commenting syntax as C like languages.",0,{"inputs":[],"output":{"name":"self"}}],[11,"new_func","","Convience constructor for creating a language that has the same commenting syntax as ML like languages.",0,{"inputs":[],"output":{"name":"self"}}],[11,"new_html","","Convience constructor for creating a language that has the same commenting syntax as HTML like languages.",0,{"inputs":[],"output":{"name":"self"}}],[11,"new_hash","","Convience constructor for creating a language that has the same commenting syntax as Bash.",0,{"inputs":[],"output":{"name":"self"}}],[11,"new_multi","","Convience constructor for creating a language that only has multi line comments.",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"new_pro","","Convience constructor for creating a language that has the same commenting syntax as Prolog.",0,{"inputs":[],"output":{"name":"self"}}],[11,"new_single","","Convience constructor for creating a language that only has single line comments.",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"is_empty","","Checks if the language is empty. Empty meaning it doesn&#39;t have any statistics.",0,{"inputs":[{"name":"language"}],"output":{"name":"bool"}}],[11,"is_blank","","Checks if the language doesn&#39;t contain any comments.",0,{"inputs":[{"name":"language"}],"output":{"name":"bool"}}],[11,"nested","","Specify if the the language supports nested multi line comments.",0,{"inputs":[{"name":"language"}],"output":{"name":"self"}}],[11,"sort_by","","Sorts each of the `Stats` structs contained in the language based on what category is provided\npanic!&#39;s if given the wrong category.",0,{"inputs":[{"name":"language"},{"name":"str"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"language"},{"name":"self"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"language"},{"name":"self"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"language"},{"name":"self"}],"output":null}],[11,"add_assign","","",0,{"inputs":[{"name":"language"},{"name":"stats"}],"output":null}],[11,"fmt","","",3,{"inputs":[{"name":"languages"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"languages"}],"output":{"name":"languages"}}],[11,"from_cbor","","Creates a `Languages` struct from cbor.",3,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"from_json","","Creates a `Languages` struct from json.",3,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"from_yaml","","Creates a `Languages` struct from json.",3,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"get_statistics","","Get statistics from the list of paths provided, and a list ignored keywords\nto ignore paths containing them.",3,{"inputs":[{"name":"languages"},{"name":"i"},{"name":"i"}],"output":null}],[11,"new","","Constructs a new, blank `Languages`.",3,{"inputs":[],"output":{"name":"self"}}],[11,"to_cbor","","Converts `Languages` to CBOR.",3,{"inputs":[{"name":"languages"}],"output":{"name":"result"}}],[11,"to_json","","Converts `Languages` to JSON.",3,{"inputs":[{"name":"languages"}],"output":{"name":"result"}}],[11,"to_yaml","","Converts `Languages` to YAML.",3,{"inputs":[{"name":"languages"}],"output":{"name":"result"}}],[11,"into_iter","","",3,{"inputs":[{"name":"languages"}],"output":{"name":"intoiter"}}],[11,"add_assign","","",3,{"inputs":[{"name":"languages"},{"name":"btreemap"}],"output":null}],[11,"add_assign","","",3,{"inputs":[{"name":"languages"},{"name":"btreemap"}],"output":null}],[11,"add_assign","","",3,{"inputs":[{"name":"languages"},{"name":"btreemap"}],"output":null}],[11,"new","collections::btree::map","Makes a new empty BTreeMap with a reasonable choice for B.",4,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",4,null],[11,"get","","Returns a reference to the value corresponding to the key.",4,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",4,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",4,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map.",4,{"inputs":[{"name":"btreemap"},{"name":"k"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",4,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"option"}}],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",4,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"range"}}],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",4,{"inputs":[{"name":"btreemap"},{"name":"bound"},{"name":"bound"}],"output":{"name":"rangemut"}}],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",4,{"inputs":[{"name":"btreemap"},{"name":"k"}],"output":{"name":"entry"}}],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",4,{"inputs":[{"name":"btreemap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",4,{"inputs":[{"name":"btreemap"}],"output":{"name":"itermut"}}],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",4,{"inputs":[{"name":"btreemap"}],"output":{"name":"keys"}}],[11,"values","","Gets an iterator over the values of the map, in order by key.",4,{"inputs":[{"name":"btreemap"}],"output":{"name":"values"}}],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",4,{"inputs":[{"name":"btreemap"}],"output":{"name":"valuesmut"}}],[11,"len","","Returns the number of elements in the map.",4,{"inputs":[{"name":"btreemap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",4,{"inputs":[{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"index","","",4,{"inputs":[{"name":"btreemap"},{"name":"q"}],"output":{"name":"v"}}],[11,"fmt","","",4,{"inputs":[{"name":"btreemap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",4,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"option"}}],[11,"eq","","",4,{"inputs":[{"name":"btreemap"},{"name":"btreemap"}],"output":{"name":"bool"}}],[11,"default","","",4,{"inputs":[],"output":{"name":"btreemap"}}],[11,"hash","","",4,null],[11,"extend","","",4,null],[11,"extend","","",4,null],[11,"from_iter","","",4,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"into_iter","","",4,{"inputs":[{"name":"btreemap"}],"output":{"name":"intoiter"}}],[11,"clone","","",4,{"inputs":[{"name":"btreemap"}],"output":{"name":"btreemap"}}],[11,"drop","","",4,null],[11,"deref","tokei","",3,{"inputs":[{"name":"languages"}],"output":{"name":"target"}}],[11,"deref_mut","","",3,{"inputs":[{"name":"languages"}],"output":{"name":"btreemap"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"languagetype"},{"name":"languagetype"}],"output":{"name":"option"}}],[11,"eq","","",2,{"inputs":[{"name":"languagetype"},{"name":"languagetype"}],"output":{"name":"bool"}}],[11,"cmp","","",2,{"inputs":[{"name":"languagetype"},{"name":"languagetype"}],"output":{"name":"ordering"}}],[11,"fmt","","",2,{"inputs":[{"name":"languagetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"languagetype"}],"output":{"name":"languagetype"}}],[11,"serialize","","",2,{"inputs":[{"name":"languagetype"},{"name":"s"}],"output":{"name":"result"}}],[11,"deserialize","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"as_ref","","",2,{"inputs":[{"name":"languagetype"}],"output":{"name":"str"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"name","","Returns the display name of a language.",2,{"inputs":[{"name":"languagetype"}],"output":{"name":"str"}}],[11,"from_extension","","Get language from it&#39;s file extension.",2,{"inputs":[{"name":"p"}],"output":{"name":"option"}}],[11,"from","","",2,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",2,{"inputs":[{"name":"languagetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","collections::borrow","",5,{"inputs":[{"name":"languagetype"}],"output":{"name":"self"}}],[11,"from","","",5,{"inputs":[{"name":"languagetype"}],"output":{"name":"self"}}],[11,"clone","tokei","",1,{"inputs":[{"name":"stats"}],"output":{"name":"stats"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"stats"}}],[11,"fmt","","",1,{"inputs":[{"name":"stats"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"stats"},{"name":"stats"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"stats"},{"name":"stats"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"stats"},{"name":"stats"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"stats"},{"name":"stats"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"stats"},{"name":"stats"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"stats"},{"name":"stats"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"stats"},{"name":"stats"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"stats"},{"name":"stats"}],"output":{"name":"bool"}}],[11,"new","","Create a new `Stats` from a file path.",1,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"stats"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"consts","","",null,null],[17,"BLANKS","tokei::consts","",null,null],[17,"COMMENTS","","",null,null],[17,"CODE","","",null,null],[17,"FILES","","",null,null],[17,"LINES","","",null,null]],"paths":[[3,"Language"],[3,"Stats"],[4,"LanguageType"],[3,"Languages"],[3,"BTreeMap"],[4,"Cow"]]};
initSearch(searchIndex);
